#+PROPERTY: header-args:emacs-lisp :tangle yes
#+TITLE: Navigation 

* Lexical Binding

#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

* Auto-completion

#+begin_src emacs-lisp
  (use-package company
    :init (global-company-mode)
    :hook ((prog-mode . company-mode)
  	 (org-mode . company-mode)
  	 (emacs-lisp-mode . company-mode))
    :config
    (setq company-idle-delay 0
          company-minimum-prefix-length 1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend))
    (define-key company-active-map (kbd "<tab>") #'company-complete-selection)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "RET") nil))
#+end_src

* LSP Configuration

** Togglable LSP System

#+begin_src emacs-lisp
;; Define the LSP choice customization
(defcustom thornemacs/lsp-backend 'eglot
  "The LSP backend to use. Either 'eglot or 'lsp-mode."
  :type '(choice (const :tag "Eglot" eglot)
                (const :tag "LSP Mode" lsp-mode))
  :group 'thornemacs)

;; Interactive function to toggle LSP backend
(defun thornemacs/toggle-lsp-backend ()
  "Toggle between eglot and lsp-mode backends."
  (interactive)
  (setq thornemacs/lsp-backend
        (if (eq thornemacs/lsp-backend 'eglot)
            'lsp-mode
          'eglot))
  (message "LSP backend set to %s" thornemacs/lsp-backend)

  ;; Restart any active LSP sessions if needed
  (when (and (boundp 'eglot--managed-mode) eglot--managed-mode)
    (eglot-shutdown-all)
    (run-with-timer 1 nil
                    (lambda ()
                      (message "Restarting with LSP-mode...")
                      (lsp))))

  (when (and (boundp 'lsp-mode) lsp-mode)
    (lsp-disconnect)
    (run-with-timer 1 nil
                    (lambda ()
                      (message "Restarting with Eglot...")
                      (eglot-ensure)))))

;; Keybinding for toggling
(global-set-key (kbd "C-c t l") 'thornemacs/toggle-lsp-backend)

;; Safer format on save function
(defun thornemacs/lsp-format-buffer-on-save ()
  "Add appropriate format-on-save hook based on selected backend with safety checks."
  (if (eq thornemacs/lsp-backend 'eglot)
      (add-hook 'before-save-hook
                (lambda ()
                  ;; For org-mode, don't use LSP formatting
                  (if (eq major-mode 'org-mode)
                      (message "Skipping LSP format in org-mode")
                    ;; Otherwise, check if LSP is actually connected before formatting
                    (when (and (fboundp 'eglot-managed-p)
                               (eglot-managed-p)
                               (eglot-current-server))
                      (eglot-format-buffer))))
                -10 t)
    ;; LSP-mode version
    (add-hook 'before-save-hook
              (lambda ()
                ;; For org-mode, don't use LSP formatting
                (if (eq major-mode 'org-mode)
                    (message "Skipping LSP format in org-mode")
                  ;; Otherwise, check if LSP is actually connected
                  (when (and (bound-and-true-p lsp-mode)
                             (lsp-workspaces))
                    (lsp-format-buffer))))
              -10 t)))

;; Improved start LSP function that handles org-mode specially
(defun thornemacs/start-lsp ()
  "Start the selected LSP backend with special handling for org-mode."
  (if (eq major-mode 'org-mode)
      ;; For org-mode, we don't start a server but still set up format-on-save
      (thornemacs/lsp-format-buffer-on-save)
    ;; For all other modes, start LSP as normal with error handling
    (condition-case err
        (progn
          (when (eq thornemacs/lsp-backend 'eglot)
            (eglot-ensure))
          (when (eq thornemacs/lsp-backend 'lsp-mode)
            (lsp-deferred))
          ;; Add format-on-save hook
          (thornemacs/lsp-format-buffer-on-save))
      (error (message "Could not start LSP: %s" (error-message-string err))))))

;; Support for LSP in org-babel code blocks
;; (defun thornemacs/setup-org-babel-lsp ()
;;   "Set up LSP support for org-babel code blocks."
;;   ;; Enable company mode for completions
;;   (company-mode +1)
;;
;;   ;; Add hooks for org-src-mode
;;   (add-hook 'org-src-mode-hook
;;             (lambda ()
;;               ;; When editing a source block, make sure the right LSP is loaded
;;               (when (org-src-edit-buffer-p) ;; Check if this is actually a src edit buffer
;;                 (let ((lang (when (boundp 'org-src-lang-modes)
;;                               (org-src-get-lang-mode (car (org-babel-get-src-block-info t))))))
;;                   ;; Only try to activate LSP for programming languages
;;                   (when (and lang (derived-mode-p 'prog-mode))
;;                     ;; Make sure direnv is loaded
;;                     (thornemacs/ensure-envrc-before-lsp)
;;                     ;; Start LSP with a small delay
;;                     (run-with-timer 0.5 nil #'thornemacs/start-lsp)))))))
#+end_src

** LSP Packages Configuration

#+begin_src emacs-lisp
;; Install and configure both packages
(use-package eglot
  :commands (eglot eglot-ensure)
  :config
  (setq eglot-autoshutdown t))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :config
  (setq lsp-completion-provider :capf
        lsp-headerline-breadcrumb-enable nil
        lsp-enable-on-type-formatting nil
        lsp-enable-snippet nil
        lsp-modeline-diagnostics-enable t))

(use-package eldoc-box
  :commands (eldoc-box-hover-at-point-mode)
  :hook ((eglot-managed-mode . eldoc-box-hover-at-point-mode)
         (lsp-mode . eldoc-box-hover-at-point-mode)))

;; Add org-mode specific hook for LSP in code blocks
;; (add-hook 'org-mode-hook #'thornemacs/setup-org-babel-lsp)
#+end_src

** Language-specific LSP Setup

#+begin_src emacs-lisp

;; Install language modes
(use-package rustic)
(use-package go-mode)
(use-package nix-mode)
(use-package ccls)

;; Set up LSP hooks with our dynamic system
(defun thornemacs/setup-lang-lsp-hooks ()
  "Add LSP hooks for all supported languages."
  (dolist (mode-hook '(rustic-mode-hook
                      go-mode-hook
                      nix-mode-hook
                      ccls-hook
                      c-mode-hook
                      c++-mode-hook))

    ;; Add our dynamic LSP starter after loading direnv
    (add-hook mode-hook
              (lambda ()
                ;; Make sure envrc has run first
                (thornemacs/ensure-envrc-before-lsp)
                ;; Add a small delay to ensure env is fully loaded
                (run-with-timer 0.5 nil #'thornemacs/start-lsp))
              15)))

;; Run the hook setup
(thornemacs/setup-lang-lsp-hooks)

;; Now ensure org-babel code blocks get proper LSP support when editing
;; (with-eval-after-load 'org
;;   (advice-add 'org-edit-src-code :after
;;               (lambda (&rest _)
;;                 (when (and (derived-mode-p 'prog-mode)
;;                            (boundp 'org-src-source-file-name)
;;                            org-src-source-file-name)
;;                   ;; Check if this is a language we'd want LSP for
;;                   (let ((lang (when (and (markerp org-src-source-file-name)
;;                                        (marker-buffer org-src-source-file-name))
;;                                (buffer-local-value 'org-src-lang-modes
;;                                                   (marker-buffer org-src-source-file-name)))))
;;                     (when (and lang (member lang '("rustic" "rust" "go" "nix" "c" "c++" "emacs-lisp")))
;;                       ;; Start LSP for this edit session
;;                       (thornemacs/ensure-envrc-before-lsp)
;;                       (run-with-timer 0.3 nil ;;'thornemacs/start-lsp)))))))

(with-eval-after-load 'org
  ;; Ensure org mode is properly loaded
  (require 'org)
  (require 'org-element)

  ;; Rest of your org configuration
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((rust . t)
     (nix . t)
     (org . t)
     (emacs-lisp .t))))
#+end_src

** Org-Integration

#+begin_src emacs-lisp
(defun thornemacs/start-lsp-manually-for-lang (lang)
  "Start LSP for a specific language in org-mode code blocks."
  (interactive "sEnter language (e.g., rust, go, nix): ")
  (let ((lang-mode (intern (concat lang "-mode"))))
    (if (functionp lang-mode)
        (progn
          (funcall lang-mode) ;; Enable the language mode
          (thornemacs/start-lsp)) ;; Start LSP
      (message "No mode found for language: %s" lang))))

(global-set-key (kbd "C-c t m") 'thornemacs/start-lsp-manually-for-lang)
#+end_src
