#+SETUPFILE: ~/.config/emacs/org/style.org
#+PROPERTY: header-args:emacs-lisp :tangle config.el :comments no :mkdirp yes :prologue "(unless (bound-and-true-p lexical-binding) (princ \";;; -*- lexical-binding: t -*-\\n\"))"
#+title: ThornEmacs
#+subtitle: I have issues

ThornEmacs is my personalized configuration of emacs, using the
[[https://github.com/nix-community/emacs-overlay][emacs-overlay for nixpkgs]]. Customized to enhance productivity and
devolopment workflows...and basically function like my neovim config:
[[https://github.com/Elias-Ainsworth/thornevim][ThorneVim]].

* Features
- A custom function to toggle between =eglot= (default) and =lsp-mode=.
- A custom function to set the background to a the background color
  determinied by wallust.
- A home manager module to boot.

* Installation
** NixOS
Include the following input in your =flake.nix= file:

#+begin_src nix :tangle no
{
  inputs.thornemacs.url = "github:Elias-Ainsworth/thornemacs";
}
#+end_src

Then include it in your =environment.systemPackages= or
=home.packages= by referencing the input:

#+begin_src nix :tangle no
  inputs.thornemacs.packages.${pkgs.system}.default
#+end_src

Alternatively, it can also be run directly:

#+begin_src console :tangle no
nix run github:Elias-Ainsworth/thornemacs
#+end_src

*** home-manager
This program can be configured via home-manager. Include the flake
input, but you don't need to add it to =home.packages=-enabling the
module handles that automatically.

You can enable any of the following options as part of your
home-manager configuration:

#+begin_src nix :tangle no
{
  imports = [ inputs.thornemacs.homeManagerModules.default ]; # You need this...

  programs.thornemacs = {
    enable = true;
    service = {
      enable = true;
      client = true; # enabled by default
    };
    installAssets = {
      enable = true;
      ascii = true;
      icons = true;
      images = true;
      org = true;
      themes = true;
    };
    package = inputs.thornemacs.packages.${pkgs.system}.default; # I don't know why you'd do this...
  };
}
#+end_src

** Legacy *NIX based operating systems
1. [[https://nix-community.github.io/home-manager/][Install home-manager]]
2. Then go back to the section on [[*NixOS][NixOS]] and follow those steps, and if
   you're also using home-manager I suggest using those options as well.

* Configuration
To configure this...configuration to your liking:
1. If the configuration involves a package add it to the
   =extraEmacsPackages= section in [[file:default.nix][default.nix]].
2. Set it up by editing this file (yes the README file) under the
   [[*The Actual Config][configuration]] section.

* Usage
You're kidding me right? It's emacs (with evil-mode)...use it like
emacs (with evil-mode).

* Documentation
This is more for my reference than anything else. But if you would
like to view my documentation, check out [[file:docs/][./docs]].

* Hacking
Just use =nix develop=

* The Actual Config
** Lexical Binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

** Performance Tweaks
*** Garbage Collection
#+begin_src emacs-lisp
;; Speed up startup by raising GC limits
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

;; Temporarily disable file-name handlers
(defvar original-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(add-hook 'emacs-startup-hook
          (lambda ()
            ;; Restore sane defaults
            (setq gc-cons-threshold (* 100 1024 1024) ;; 100MB
                  gc-cons-percentage 0.1
                  file-name-handler-alist original-file-name-handler-alist)
            (message "Emacs ready in %.2f seconds with %d GCs."
                     (float-time (time-subtract after-init-time before-init-time))
                     gcs-done)))
#+end_src

*** Native Compilation
#+begin_src emacs-lisp
(when (and (fboundp 'native-comp-available-p)
           (native-comp-available-p))
  (setq native-comp-async-report-warnings-errors nil
        native-comp-deferred-compilation t))
#+end_src

*** File Operations
#+begin_src emacs-lisp
;; Delay file handlers until needed
(setq file-name-handler-alist-original file-name-handler-alist
      file-name-handler-alist nil)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist file-name-handler-alist-original
                  file-name-handler-alist-original nil)
            (message "Emacs loaded in %s with %d garbage collections."
                    (format "%.2f seconds"
                            (float-time (time-subtract after-init-time before-init-time)))
                    gcs-done)))
#+end_src

*** Package Loading Order
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
(setq frame-inhibit-implied-resize t)
#+end_src

** Auto-Tangle on Save
#+begin_src emacs-lisp
(defun auto-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "init.org" user-emacs-directory))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'after-save-hook #'auto-tangle-config nil 'local)))
#+end_src

** Bootstrap =use-package=
#+begin_src emacs-lisp
(require 'use-package)
(setq use-package-always-ensure t
      use-package-always-defer t
      use-package-expand-minimally t)
#+end_src

** Benchmarking
#+begin_src emacs-lisp
(use-package benchmark-init
  :config
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src

** Recentf
#+begin_src emacs-lisp
;; (use-package recentf
;;   :init
;;   (setq recentf-max-saved-items 100
;;         recentf-max-menu-items 15)
;;   :hook (after-init . (lambda ()
;;                          (run-with-timer 1 nil #'recentf-mode))))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
;; Prevent conflicts with evil-collection
;; (setq evil-want-keybinding nil)

(use-package evil
  :demand t
  :custom
  (evil-want-keybinding nil)
  :init
  (evil-mode 1))

 (use-package evil-collection
   :after evil
   :hook (after-init . evil-collection-init))

(use-package embrace)

(use-package evil-surround
  :hook ((prog-mode . evil-surround-mode)
         (org-mode  . evil-surround-mode)))

(use-package evil-embrace
  :after (evil evil-surround embrace)
  :init (evil-embrace-enable-evil-surround-integration)
  :config
  (evil-embrace-enable-evil-surround-integration)
  (add-hook 'org-mode-hook 'embrace-org-mode-hook))

(use-package evil-commentary
  :after evil
  :hook (after-init . evil-commentary-mode))

(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(defun thorne/disable-evil-in-terminal-buffers ()
  "Disable Evil mode in interactive terminal buffers."
  (when (bound-and-true-p evil-local-mode)
    (evil-local-mode -1)))

(add-hook 'term-mode-hook #'thorne/disable-evil-in-terminal-buffers)
(add-hook 'vterm-mode-hook #'thorne/disable-evil-in-terminal-buffers)
(add-hook 'eshell-mode-hook #'thorne/disable-evil-in-terminal-buffers)
#+end_src

** UI
*** Disable Default GUI Elements
#+begin_src emacs-lisp
  ;; Disable UI chrome early
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq window-divider-default-right-width 0)
  (setq window-divider-default-bottom-width 0)
  (window-divider-mode -1)

  (add-to-list 'default-frame-alist '(internal-border-width . 0))
  (set-frame-parameter nil 'internal-border-width 0)
#+end_src

*** Fonts
#+begin_src emacs-lisp
(let ((current-font (face-attribute 'default :family)))
  (set-face-attribute 'default nil
    :family current-font
    :height 120))

;; (set-face-attribute 'default nil
;;   :family "Geist Mono NerdFont"
;;   :height 120)

(set-fontset-font t 'japanese-jisx0208 (font-spec :family "Mamelon"))
(set-fontset-font t 'han (font-spec :family "Mamelon"))
(set-fontset-font t 'kana (font-spec :family "Mamelon"))
(set-fontset-font t 'cjk-misc (font-spec :family "Mamelon"))
#+end_src

*** Theme
#+begin_src emacs-lisp
;; (use-package catppuccin-theme
;;   :config (setq catppuccin-flavor 'mocha)
;;   :init (load-theme 'catppuccin :no-confirm))
;; (add-hook 'server-after-make-frame-hook #'catppuccin-reload)

(use-package gruvbox-theme
  :defer nil
  ;; :config
  ;; Optional: Customize Gruvbox flavor (e.g., light or dark)
  ;; (setq gruvbox-dark-variant 'hard)  ; Use the 'hard' variant of dark mode
  :init
  (load-theme 'gruvbox-dark-hard t))

;; (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/everforest-emacs/")
;; (add-to-list 'custom-theme-load-path "./assets/themes/everforest-emacs/")
;; (load-theme 'everforest-medium-dark t)  ;; or 'everforest-soft-light etc.
#+end_src

#+RESULTS:
: gruvbox-theme

*** Wallpaper
#+begin_src emacs-lisp
(defun wallpaper (arg)
  "Run the wallpaper command with an optional argument."
  (interactive "P")  ; This means it will ask for user input if necessary
  (let ((command "wallpaper"))  ; Base command
    (if arg
        (setq command (concat command " " (read-string "Enter path or command: "))))  ; Ask for the path/command if argument is passed
    (shell-command command)))  ; Run the command in the shell

(global-set-key (kbd "C-c w w") 'wallpaper)
#+end_src

*** Wallust Integration
#+begin_src emacs-lisp
(require 'json)
(require 'filenotify)

;; --- Variables

(defvar thornemacs/wallust-json-path "~/.cache/wallust/nix.json")
(defvar thornemacs/wallust-watch-descriptor nil)
(defvar thornemacs/wallust-enabled t
  "Whether Wallust background is currently active.")

(defvar thornemacs/theme-default-background nil
  "Default theme background color before Wallust is applied.")

;; --- Functions

(defun thornemacs/capture-theme-background ()
  "Capture the current theme background color before Wallust applies."
  (unless thornemacs/theme-default-background ;; Only capture once
    (setq thornemacs/theme-default-background (face-background 'default nil t))
    (message "[thornemacs] Captured theme background: %s" thornemacs/theme-default-background)))

(defun thornemacs/load-wallust-bg-from-json ()
  "Load Wallust background color from JSON and apply it."
  (when (file-exists-p thornemacs/wallust-json-path)
    (let* ((json-object-type 'alist)
           (json (with-temp-buffer
                   (insert-file-contents thornemacs/wallust-json-path)
                   (json-read)))
           (bg (alist-get 'background (alist-get 'special json))))
      (when (and bg (stringp bg))
        (set-face-background 'default bg (selected-frame))
        (set-face-background 'fringe bg (selected-frame))
        (message "[thornemacs] Wallust background applied: %s" bg)))))

(defun thornemacs/restore-theme-background ()
  "Restore the original theme background."
  (when thornemacs/theme-default-background
    (set-face-background 'default thornemacs/theme-default-background (selected-frame))
    (set-face-background 'fringe thornemacs/theme-default-background (selected-frame))
    (message "[thornemacs] Theme background restored: %s" thornemacs/theme-default-background)))

(defun thornemacs/toggle-wallust-background ()
  "Toggle between Wallust background and theme background."
  (interactive)
  (setq thornemacs/wallust-enabled (not thornemacs/wallust-enabled))
  (if thornemacs/wallust-enabled
      (thornemacs/load-wallust-bg-from-json)
    (thornemacs/restore-theme-background)))

(defun thornemacs/start-wallust-bg-watcher ()
  "Start watching Wallust JSON for changes."
  (interactive)
  (unless (and thornemacs/wallust-watch-descriptor
               (file-notify-valid-p thornemacs/wallust-watch-descriptor))
    (when (file-exists-p thornemacs/wallust-json-path)
      (setq thornemacs/wallust-watch-descriptor
            (file-notify-add-watch
             thornemacs/wallust-json-path
             '(change)
             (lambda (_event)
               (when thornemacs/wallust-enabled
                 (thornemacs/load-wallust-bg-from-json))))))
    (message "[thornemacs] Started watching Wallust JSON.")))

;; --- Setup hooks properly

;; When Emacs starts, capture the theme background after first frame
(add-hook 'window-setup-hook #'thornemacs/capture-theme-background)

;; Also capture it every time a theme is loaded
(add-hook 'after-load-theme-hook (lambda ()
                                   (setq thornemacs/theme-default-background nil) ;; Clear cached value
                                   (thornemacs/capture-theme-background)
                                   (when (not thornemacs/wallust-enabled)
                                     (thornemacs/restore-theme-background))))

;; Load Wallust bg *after* capturing default
(add-hook 'emacs-startup-hook
          (lambda ()
            (run-with-timer
             1 nil ;; small delay to let everything settle
             (lambda ()
               (when thornemacs/wallust-enabled
                 (thornemacs/load-wallust-bg-from-json)
                 (thornemacs/start-wallust-bg-watcher))))))

;; --- Keybinding
(global-set-key (kbd "C-c w t") #'thornemacs/toggle-wallust-background)
#+end_src

*** Transparency
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 80)
(set-face-background 'default nil (selected-frame))
(set-face-background 'fringe nil (selected-frame))

(defvar thornemacs/transparency-enabled t
  "Whether transparency is currently enabled.")

(defvar thornemacs/use-wallust-bg nil
  "Whether to use Wallust background color instead of default.")

(defvar thornemacs/default-background-color nil
  "Captured background color from the active theme.")

(defun thornemacs/get-theme-background-color ()
  "Safely capture the solid background color of the current theme."
  (let ((current-alpha (frame-parameter nil 'alpha-background)))
    (unwind-protect
        (progn
          (set-frame-parameter nil 'alpha-background 100)
          (face-background 'default nil t))
      (set-frame-parameter nil 'alpha-background current-alpha))))

(defun thornemacs/capture-default-background ()
  "Capture and save the theme background color (even if transparency is active)."
  (setq thornemacs/default-background-color (thornemacs/get-theme-background-color))
  (message "[thornemacs] Captured theme background: %s" thornemacs/default-background-color))

(defun thornemacs/apply-background ()
  "Apply the current background color depending on settings."
  (let ((color (if thornemacs/use-wallust-bg
                   thornemacs/wallust-background-color
                 thornemacs/default-background-color)))
    (set-face-background 'default color (selected-frame))
    (set-face-background 'fringe color (selected-frame))
    (message "[thornemacs] Applied background: %s" color)))

;; --- Main toggle functions
(defun thornemacs/toggle-transparency ()
  "Toggle transparency on/off."
  (interactive)
  (if thornemacs/transparency-enabled
      (progn
        (set-frame-parameter nil 'alpha-background 100)
        (thornemacs/apply-background)
        (setq thornemacs/transparency-enabled nil)
        (message "[thornemacs] Transparency disabled."))
    (progn
      (set-frame-parameter nil 'alpha-background 80)
      (set-face-background 'default nil (selected-frame))
      (set-face-background 'fringe nil (selected-frame))
      (setq thornemacs/transparency-enabled t)
      (message "[thornemacs] Transparency enabled."))))

;; --- Setup hooks
(add-hook 'after-load-theme-hook #'thornemacs/capture-default-background)
(add-hook 'emacs-startup-hook #'thornemacs/capture-default-background)

;; --- Keybindings
(global-set-key (kbd "C-c t t") #'thornemacs/toggle-transparency)
#+end_src

*** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :demand t
  :init
  ;; Delay initial-buffer-choice until after dashboard loads
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  :config
  (dashboard-setup-startup-hook)
  :custom
  ;; Banner and layout
  (dashboard-startup-banner (cons "~/.config/emacs/images/chise.png" "~/.config/emacs/ascii/eepy.txt")) ; You can use a custom path too
  (dashboard-banner-logo-title "")
  (dashboard-center-content t)
  (dashboard-show-shortcuts nil)
  (dashboard-projects-backend 'projectile)

  ;; Dashboard items
  (dashboard-items '((recents  . 5)
                          (projects . 5)
                          (agenda   . 5)))
  (dashboard-footer-messages
      (let ((quotes '("#[derive(dumb)]"
                      "「僕はエリアス・エインズワースかもしれないが、
                                チセがいない――つまり、僕は完全に『チセレス』だ。」 "
                      "Sacrifice yourself, or bow to lesser gods...")))
        (list (nth (random (length quotes)) quotes)))))
#+end_src

*** Modeline
#+begin_src emacs-lisp
(use-package nerd-icons
  :defer t)

(use-package doom-modeline
  :defer t
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-height 25)
  (doom-modeline-bar-width 3)
  (doom-modeline-icon nil)
  (doom-modeline-project-detection 'projectile)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project))
#+end_src

*** TODO Indent Guides
#+begin_src emacs-lisp
;; (defun thornemacs/enable-indent-guides-safe ()
;;   (when (face-background 'default)
;;     (highlight-indent-guides-mode)))

;; (use-package highlight-indent-guides
;;   :hook (prog-mode . thornemacs/enable-indent-guides-safe)
;;   :custom
;;   (highlight-indent-guides-method 'character)
;;   (highlight-indent-guides-auto-enabled t)
;;   (highlight-indent-guides-responsive 'top))

;; (use-package highlight-indent-guides
;;   :hook (prog-mode . highlight-indent-guides-mode)
;;   :custom
;;   (highlight-indent-guides-method 'fill) ;; or try 'column
;;   (highlight-indent-guides-auto-enabled t)
;;   (highlight-indent-guides-responsive 'top)
;;   (highlight-indent-guides-delay 0.1))
#+end_src

*** Rainbow Mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook (prog-mode . rainbow-mode))
#+end_src

*** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :hook
  ((prog-mode . smartparens-mode)
		 (org-mode . smartparens-mode)
		 (emacs-lisp-mode . smartparens-mode))
  :config
  (require 'smartparens-config))
#+end_src

** Navigation
*** Which-key
#+begin_src emacs-lisp
(use-package which-key
  :hook (after-init . which-key-mode)
  :custom
  (which-key-idle-delay 0.3))
#+end_src

*** Avy
#+begin_src emacs-lisp
    (use-package avy
      :bind (("M-s" . avy-goto-char-timer)
             ("M-g c" . avy-goto-char)
             ("M-g w" . avy-goto-word-1)))
#+end_src

*** Consult
#+begin_src emacs-lisp
    (use-package consult
      :bind (("C-s" . consult-line)
             ("C-x b" . consult-buffer)
             ("M-g g" . consult-goto-line)
             ("M-g M-g" . consult-goto-line)))
#+end_src

*** Embark
#+begin_src emacs-lisp
    (use-package embark
      :bind (("C-." . embark-act)
             ("C-;" . embark-dwim)
             ("C-h B" . embark-bindings))
      :init
      (setq embark-action-indicator
            (lambda (&optional _)
              (which-key--show-keymap "Embark Actions" embark--keymap nil nil t)))
      (setq embark-become-indicator embark-action-indicator))
#+end_src

*** Orderless
#+begin_src emacs-lisp
    (use-package orderless
      :init
      (setq completion-styles '(orderless)
            completion-category-defaults nil
            completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  :custom
  (vertico-cycle t))
#+end_src

*** Marginalia
#+begin_src emacs-lisp
    (use-package marginalia
      :hook (after-init . marginalia-mode))
#+end_src

*** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :custom
  (projectile-project-search-path '("~/projects/"))
  (projectile-completion-system 'default)
  (projectile-switch-project-action #'projectile-dired)
  (projectile-enable-caching t)
  (projectile-generic-command "rg --files --hidden --follow -g '!.git/'")
  :hook (after-init . projectile-mode)
  :config (define-key global-map (kbd "C-x p") 'projectile-command-map))
#+end_src

*** Dirvish
#+begin_src emacs-lisp
(use-package dirvish
  :after evil
  :hook (after-init . dirvish-override-dired-mode)
  :custom
  (dirvish-default-layout '(0 0.25 0.75))
  (dirvish-mode-line-format
        '(:left (sort symlink) :right (omit yank index)))
  (dirvish-header-line-height 24)

  ;; Explicitly bind Evil keys to Dirvish (NOT using evil-collection)
  (with-eval-after-load 'dirvish
    (evil-define-key 'normal dirvish-mode-map
      "h" #'dired-up-directory
      "l" #'dired-find-file
      "q" #'quit-window
      "gg" #'revert-buffer
      ;; You can add more custom bindings here
      ))

  ;; Optional: if you want Enter (RET) to open files too
  (with-eval-after-load 'dirvish
    (evil-define-key 'normal dirvish-mode-map
      (kbd "RET") #'dired-find-file))
)
#+end_src

** Direnv
#+begin_src emacs-lisp
(use-package envrc
  :demand t  ; Load immediately instead of deferring
  :config
  (envrc-global-mode)

  ;; Activate envrc before starting LSP to ensure correct environment
  (defun thornemacs/ensure-envrc-before-lsp ()
    "Make sure envrc is activated before LSP starts."
    (when (and (buffer-file-name)
              (not envrc--status))
      (envrc-mode 1)
      (envrc-reload)))

  ;; Add this hook to prog-mode which will run before our LSP hooks
  (add-hook 'prog-mode-hook #'thornemacs/ensure-envrc-before-lsp '5))
#+end_src

** LSP
*** Auto-completion
#+begin_src emacs-lisp
(use-package company
  :init (global-company-mode)
  :hook ((prog-mode . company-mode)
	 (org-mode . company-mode)
	 (emacs-lisp-mode . company-mode))
  :config
  (setq company-idle-delay 0
        company-minimum-prefix-length 1
        company-selection-wrap-around t
        company-tooltip-align-annotations t
        company-frontends '(company-pseudo-tooltip-frontend))
  (define-key company-active-map (kbd "<tab>") #'company-complete-selection)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous)
  (define-key company-active-map (kbd "RET") nil))
#+end_src

*** Togglable LSP System
#+begin_src emacs-lisp
;; Define the LSP choice customization
(defcustom thornemacs/lsp-backend 'eglot
  "The LSP backend to use. Either 'eglot or 'lsp-mode."
  :type '(choice (const :tag "Eglot" eglot)
                (const :tag "LSP Mode" lsp-mode))
  :group 'thornemacs)

;; Interactive function to toggle LSP backend
(defun thornemacs/toggle-lsp-backend ()
  "Toggle between `eglot` and `lsp-mode` and restart the LSP session accordingly."
  (interactive)
  (let ((new-backend (if (eq thornemacs/lsp-backend 'eglot)
                         'lsp-mode
                       'eglot)))
    (setq-default thornemacs/lsp-backend new-backend)
    (setq thornemacs/lsp-backend new-backend)
    (message "LSP backend set to %s" new-backend)

    ;; Clean up old LSP sessions if running
    (cond
     ((and (fboundp 'eglot-shutdown-all)
           (bound-and-true-p eglot--managed-mode))
      (eglot-shutdown-all)
      (message "Stopped Eglot"))

     ((and (fboundp 'lsp-disconnect)
           (bound-and-true-p lsp-mode))
      (lsp-disconnect)
      (message "Stopped LSP Mode")))

    ;; Restart the new one after a short delay
    (run-with-timer
     1 nil
     (lambda ()
       (pcase new-backend
         ('eglot
          (message "Restarting with Eglot...")
          (eglot-ensure))
         ('lsp-mode
          (message "Restarting with LSP Mode...")
          (lsp-deferred)))))))

;; Keybinding for toggling
(global-set-key (kbd "C-c t l") 'thornemacs/toggle-lsp-backend)

;; Safer format on save function
(defun thornemacs/lsp-format-buffer-on-save ()
  "Add appropriate format-on-save hook based on selected backend with safety checks."
  (if (eq thornemacs/lsp-backend 'eglot)
      (add-hook 'before-save-hook
                (lambda ()
                  ;; For org-mode, don't use LSP formatting
                  (if (eq major-mode 'org-mode)
                      (message "Skipping LSP format in org-mode")
                    ;; Otherwise, check if LSP is actually connected before formatting
                    (when (and (fboundp 'eglot-managed-p)
                               (eglot-managed-p)
                               (eglot-current-server))
                      (eglot-format-buffer))))
                -10 t)
    ;; LSP-mode version
    (add-hook 'before-save-hook
              (lambda ()
                ;; For org-mode, don't use LSP formatting
                (if (eq major-mode 'org-mode)
                    (message "Skipping LSP format in org-mode")
                  ;; Otherwise, check if LSP is actually connected
                  (when (and (bound-and-true-p lsp-mode)
                             (lsp-workspaces))
                    (lsp-format-buffer))))
              -10 t)))

(defun thornemacs/start-lsp ()
  "Start the selected LSP backend with special handling for org-mode."
  (if (eq major-mode 'org-mode)
      (thornemacs/lsp-format-buffer-on-save)
    (condition-case err
        (progn
          (cond
           ((eq thornemacs/lsp-backend 'eglot)
            (require 'eglot)
            (eglot-ensure))

           ((eq thornemacs/lsp-backend 'lsp-mode)
            (require 'lsp-mode)
            (lsp-deferred)))

          (thornemacs/lsp-format-buffer-on-save))
      (error (message "Could not start LSP: %s" (error-message-string err))))))
#+end_src

*** LSP Packages Configuration
#+begin_src emacs-lisp
(use-package eglot
  :commands (eglot eglot-ensure)
  :custom
  (eglot-autoshutdown t)
  (eglot-sync-connect nil)
  (eglot-extend-to-xref nil))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :custom
  (lsp-completion-provider :capf)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-enable-on-type-formatting nil)
  (lsp-enable-snippet nil)
  (lsp-log-io nil)
  (lsp-modeline-diagnostics-enable t))

(use-package eldoc-box
  :commands (eldoc-box-hover-at-point-mode)
  :bind ("C-c d" . eldoc-box-help-at-point)
  :custom
  (eldoc-idle-delay 1.2)
  (eldoc-echo-area-use-multiline-p nil)
  (eldoc-box-only-multi-line t)
  (eldoc-box-clear-with-C-g t))

#+end_src

*** Language-specific LSP Setup
#+begin_src emacs-lisp
;; Install language modes
(use-package rustic
  :mode ("\\.rs\\'" . rustic-mode)
  :custom
  (rustic-lsp-client (if (eq thornemacs/lsp-backend 'eglot)
			 'eglot
		       'lsp-mode)
		     rustic-format-on-save nil))
(use-package go-mode
  :mode ("\\.go\\'" . go-mode)
  :custom
  (gofmt-command (if (executable-find "goimports") "goimports" "gofmt"))
  (tab-width 4)
  (indent-tabs-mode t))
(use-package nix-mode
  :mode "\\.nix\\'"
  :custom
  (nix-indent-function 'nix-indent-line)
  (nix-mode-use-smie t))
(use-package ccls
  :commands (ccls ccls-code-lens-mode)
  :init
  (defun my-maybe-activate-ccls ()
    (when (and (derived-mode-p 'c-mode 'c++-mode)
               buffer-file-name)
      (require 'ccls)
      (if (eq thornemacs/lsp-backend 'eglot)
          (eglot-ensure)
        (lsp-deferred))))
  :hook ((c-mode c++-mode) . my-maybe-activate-ccls))

;; Set up LSP hooks with our dynamic system
(defun thornemacs/setup-lang-lsp-hooks ()
  "Add LSP hooks for all supported languages."
  (dolist (mode-hook '(rustic-mode-hook
                      go-mode-hook
                      nix-mode-hook
                      ccls-hook
                      c-mode-hook
                      c++-mode-hook))

    ;; Add our dynamic LSP starter after loading direnv
    (add-hook mode-hook
              (lambda ()
                ;; Make sure envrc has run first
                (thornemacs/ensure-envrc-before-lsp)
                ;; Add a small delay to ensure env is fully loaded
                (run-with-timer 0.5 nil #'thornemacs/start-lsp))
              15)))

;; Run the hook setup
(thornemacs/setup-lang-lsp-hooks)

(with-eval-after-load 'org
  ;; Ensure org mode is properly loaded
  (require 'org)
  (require 'org-element)

  ;; Rest of your org configuration
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((rust . t)
     (nix . t)
     (emacs-lisp .t))))
#+end_src

*** Org-Integration
#+begin_src emacs-lisp
(defun thornemacs/start-lsp-manually-for-lang (lang)
  "Start LSP for a specific language in org-mode code blocks."
  (interactive "sEnter language (e.g., rust, go, nix): ")
  (let ((lang-mode (intern (concat lang "-mode"))))
    (if (functionp lang-mode)
        (progn
          (funcall lang-mode) ;; Enable the language mode
          (thornemacs/start-lsp)) ;; Start LSP
      (message "No mode found for language: %s" lang))))

(global-set-key (kbd "C-c t m") 'thornemacs/start-lsp-manually-for-lang)
#+end_src

*** TODO Modeline-Integration
#+begin_src emacs-lisp
#+end_src

** Vterm
#+begin_src emacs-lisp
(use-package vterm
  :custom
  (vterm-shell (executable-find "fish"))
  :bind
  ("C-c M-t" . vterm))
#+end_src

** Org
*** General Settings
#+begin_src emacs-lisp
(use-package org
  :mode ("\\.org\\'" . org-mode)
  :defer t
  :init
  (setq org-directory "~/org"
        org-agenda-files (list (expand-file-name "agenda" org-directory))
        org-log-done 'time
        org-deadline-warning-days 7
        org-capture-templates
        `(("t" "Todo" entry
           (file+headline ,(expand-file-name "agenda/tasks.org" org-directory) "Tasks")
           "* TODO %?\n %U\n %a")
          ;; Correctly nest this under the backtick list
          ;; ("z" "Zettel" plain
          ;;  (file "~/org/roam/%<%Y%m%d%H%M%S>-${slug}.org")
          ;;  "#+title: %^{Title}\n#+created: %U\n:PROPERTIES:\n:ID: %(org-id-uuid)\n:END:\n\n%?"
          ;;  :unnarrowed t)
		  ))

  ;; Global keybindings
  (global-set-key (kbd "C-c c") #'org-capture)
  (global-set-key (kbd "C-c C-x") #'org-agenda)

  ;; Agenda exporter options (for PDF/HTML output etc.)
  (setq org-agenda-exporter-settings
        '((ps-number-columns 2)
          (ps-landscape-mode t)
          (htmlize-output-type 'css)))
  :custom
  (org-startup-indented t)
  (org-hide-leading-stars t)
  (org-edit-src-content-indentation 0)
  (org-html-validation-link nil)
  (org-export-with-broken-links t)
  (org-hide-properties t)
  ;; (org-html-htmlize-output-type 'css) 
  :config
  ;; UI hooks
  (add-hook 'org-mode-hook #'auto-fill-mode)
  (add-hook 'org-mode-hook #'org-indent-mode)
  (add-hook 'org-mode-hook #'visual-line-mode)

  ;; Evil integration in Agenda (since it's a derived special mode)
  (add-hook 'org-agenda-mode-hook #'evil-normalize-keymaps))
#+end_src

*** Fix things =(thornemacs/load_wallust_bg_from_json)= messes up.
#+begin_src emacs-lisp
(defun my/org-mode-rust-face-override ()
  (when (derived-mode-p 'org-mode)
    (face-remap-add-relative 'rust-ampersand-face '(:inherit org-block))))

(add-hook 'org-mode-hook #'my/org-mode-rust-face-override)
#+end_src

*** Org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :after org
  :hook (org-mode . org-modern-mode)
  :custom
  ;; (org-modern-hide-stars t)
  (org-modern-star t)
  (org-modern-replace-stars "αβγδεζηθικ")
  ;; (org-modern-replace-stars "一二三四五六七八九十")
  ;; (org-modern-replace-stars "ᚦᚨᚱᛃᛇᛉᛊᛏᛜᛞ")
)
#+end_src

*** Org-babel
#+begin_src emacs-lisp
(use-package org
  :defer t
  :custom
  (org-confirm-babel-evaluate nil)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (org . t)
       (rust . t)
       (nix . t)))))
#+end_src

*** Org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :defer t
  :custom
  (org-roam-directory (expand-file-name "~/org/roam"))
  (org-roam-node-display-template
   (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  :config
  (org-roam-db-autosync-mode)
  ;; Org-roam capture (Zettels)
  (global-set-key (kbd "C-c r") #'org-roam-node-find)
  (global-set-key (kbd "C-c n i") #'org-roam-node-insert)
  (global-set-key (kbd "C-c n c") #'org-roam-capture)
  (global-set-key (kbd "C-c n s") #'org-roam-db-sync)
  (setq org-roam-capture-templates
      '(("d" "default" plain
          "* Summary\n%?\n\n* References\n- [[id:]] \n\n* Further Reading\n- \n\n* Notes\n- "
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+created: %U\n#+filetags: %^{Tags|programming|rust|nixos|linux|discrete-math|emacs|networking|theology|bible|christianity|apologetics|church-history|dnd|worldbuilding|lore|philosophy|metal|anime|manga|zettel|literature|reference|thought|project|idea|tutorial|todo|in-progress|done|review|stale|deprecated|daily|weekly|monthly|yearly}\n\n")
          :unnarrowed t))))

;; Global Org-ID Settings
(setq org-id-locations-file (expand-file-name ".org-id-locations" "~/org/roam"))
(setq org-id-track-globally t)

(defun thornemacs/org-roam-replace-id-placeholder ()
  "Delete the empty '[[id:]]' placeholder at point or when inside it, then call org-roam-node-insert."
  (interactive)
  (let ((bounds (org-element-context)))
    (when (and (eq (car bounds) 'link)
               (string= (org-element-property :type bounds) "id")
               (string= (org-element-property :path bounds) ""))
      (let ((begin (org-element-property :begin bounds))
            (end (org-element-property :end bounds)))
        (delete-region begin end)
        (call-interactively #'org-roam-node-insert)))))

(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c n r") #'thornemacs/org-roam-replace-id-placeholder))
#+end_src

*** Org-src-mode
#+begin_src emacs-lisp
(add-hook 'org-src-mode-hook
          (lambda ()
            (company-mode 1)))
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-log-current magit-blame)
  :bind (("C-x g" . magit-status)         ;; Shortcut to open Magit Status
         ("C-x C-g" . magit-dispatch)    ;; Magit dispatch for other actions
         ("C-x M-g" . magit-blame))       ;; Shortcut for Magit Blame
)
#+end_src

* TO-DO
- [X] Implement more colorschemes because I like way too many of them.
- [X] Add the option for overrides...bc nix.
- [X] Add custom banners and footers.
- [ ] Add option to set the theme via a home-manager option.
- [ ] Whatever else I come up with lmao.

* Credits
- [[https://github.com/iynaix][@iynaix]]:
  - Get with the program already folks! I +stole+ took inspiration
    from [[https://github.com/iynaix/focal][iynaix/focal]] for the flake as well as this README.

- [[https://codeberg.org/acidbong][@acidbong]]:
  - For helping my sorry ass over on the [[https://matrix.to/#/#emacs:nixos.org][Nix Emacs]] matrix space.
  - And for providing this very helpful [[https://codeberg.org/acidbong/nixos/src/branch/master/pkgs/emacs][configuration]] for me to +steal+ take
    inspiration from.
